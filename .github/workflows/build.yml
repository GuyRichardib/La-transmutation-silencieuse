name: Build Book

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install TeX Live + EB Garamond (robuste)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            texlive-xetex \
            texlive-latex-recommended \
            texlive-pictures \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            fonts-ebgaramond \
            poppler-utils
          sudo fc-cache -f -v
          kpsewhich microtype.sty
          kpsewhich newunicodechar.sty
          kpsewhich pgf.sty

      - name: Preflight - verify @include targets
        run: python3 scripts/verify_includes.py .

      - name: Count words
        run: python3 scripts/wordcount.py

      - name: Normalize Unicode (NFC)
        run: python3 scripts/normalize_unicode.py

      - name: Research preflight (offline)
        env:
          USE_LLM: "0"
        run: |
          python3 scripts/research.py

      - name: Smoke-test Unicode thin spaces (XeLaTeX)
        run: |
          cat > /tmp/utf8-smoke.tex <<'TEX'
          \documentclass{book}
          \usepackage{iftex}
          \IfFileExists{newunicodechar.sty}{\usepackage{newunicodechar}}{}
          \ifdefined\newunicodechar
            \newunicodechar{^^^^00a0}{\nobreakspace}
            \newunicodechar{^^^^202f}{\nobreak\thinspace}
            \newunicodechar{^^^^2009}{\thinspace}
          \fi
          \begin{document}
          Préface\,! ; ? «\,guillemet\,»
          Chapitre~1 — Chambre d'Orbes
          \end{document}
          TEX
          xelatex -halt-on-error /tmp/utf8-smoke.tex

      - name: Verify binary assets referenced by manuscript
        run: |
          python3 - <<'PY'
import pathlib
import re
import sys

markdown_files = [pathlib.Path("book/book.md")] + sorted(pathlib.Path("book/manuscript").glob("*.md"))
image_pattern = re.compile(r"!\[[^\]]*\]\(([^)]+)\)")
references = set()

for md_path in markdown_files:
    if not md_path.exists():
        continue
    text = md_path.read_text(encoding="utf-8", errors="ignore")
    for match in image_pattern.findall(text):
        target = match.split()[0].strip()
        if not target or target.startswith("data:"):
            continue
        if any(target.startswith(prefix) for prefix in ("http://", "https://")):
            continue
        references.add(target)

search_roots = [pathlib.Path("."), pathlib.Path("book"), pathlib.Path("assets"), pathlib.Path("book/manuscript"), pathlib.Path("book/assets")]
issues = []

for ref in sorted(references):
    found_path = None
    for root in search_roots:
        candidate = (root / ref).resolve()
        try:
            candidate.relative_to(pathlib.Path.cwd())
        except ValueError:
            continue
        if candidate.exists():
            found_path = candidate
            break
    if not found_path:
        issues.append(f"{ref} (introuvable)")
        continue
    size = found_path.stat().st_size
    if size < 1024:
        issues.append(f"{found_path} ({size} octets)")

if issues:
    print("[assets] Problèmes détectés sur les ressources référencées :")
    for item in issues:
        print(" -", item)
    sys.exit(1)
else:
    print("[assets] Toutes les images référencées semblent valides (>= 1 KiB).")
PY

      - name: Build all formats
        run: |
          chmod +x scripts/build.sh
          ./scripts/build.sh

      - name: Verify PDF page size (6x9 in = 432x648 pts)
        run: |
          echo "Vérification des dimensions du PDF..."
          pdfinfo dist/book.pdf | grep "Page size"
          pdfinfo dist/book.pdf | grep -E "Page size:\s*432 x 648" || (echo "ERREUR: Le PDF n'est pas au format 6x9 KDP." && exit 1)

      - name: Compute KDP cover size + template
        env:
          KDP_PAPER: ${{ env.KDP_PAPER }}
          KDP_TRIM: ${{ env.KDP_TRIM }}
        run: |
          set -e
          PAPER="${KDP_PAPER:-cream}"
          TRIM="${KDP_TRIM:-6x9}"
          if ! python3 scripts/kdp_cover.py --pdf dist/book.pdf --paper "$PAPER" --trim "$TRIM" --bleed 0.125 --out dist \
            --cover-image assets/kdp/cover-art.png --cover-dpi 300; then
            echo "------ xelatex .log (if present) ------"
            tail -n 200 dist/cover-template.log || true
            echo "---------------------------------------"
            exit 1
          fi
          echo "------"
          cat dist/kdp_cover_report.txt
          echo "------"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: book-artifacts
          path: dist/